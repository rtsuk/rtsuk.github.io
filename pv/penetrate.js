// Generated by CoffeeScript 1.3.1
var calculate, calculateOne, getBooleanValue, getIntSelectValue, getIntValue, lineChartData, randomInt, roll, showChart;

lineChartData = {
  labels: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
  datasets: [
    {
      fillColor: "rgba(220,220,220,0.5)",
      strokeColor: "rgba(220,220,220,1)",
      pointColor: "rgba(220,220,220,1)",
      pointStrokeColor: "#fff",
      data: []
    }, {
      fillColor: "rgba(151,187,205,0.5)",
      strokeColor: "rgba(151,187,205,1)",
      pointColor: "rgba(151,187,205,1)",
      pointStrokeColor: "#fff",
      data: []
    }
  ]
};

showChart = function() {
  var myLine;
  return myLine = new Chart(document.getElementById("penetrationChart").getContext("2d")).Line(lineChartData, {
    scaleOverride: true,
    scaleSteps: 10,
    scaleStepWidth: 10,
    scaleStartValue: 0
  });
};

randomInt = function(lower, upper) {
  return Math.floor(Math.random() * (upper - lower) + lower);
};

roll = function(sides) {
  return randomInt(1, sides);
};

getIntSelectValue = function(inputName) {
  return parseInt($("select[name='" + inputName + "']").val(), 10);
};

getIntValue = function(inputName) {
  return parseInt($("input[name='" + inputName + "']").val(), 10);
};

getBooleanValue = function(inputName) {
  return $("input[name='" + inputName + "']").is(':checked');
};

calculateOne = function(attackDice, crits, hits, defenseDice, shields, firepower, armor, cancelCrits) {
  var attackRoll, critCount, defenseRoll, hitCount, i, penetrate, result, shieldCount, totalCrits, totalHits, _i, _j;
  critCount = 0;
  hitCount = 0;
  shieldCount = 0;
  penetrate = false;
  for (i = _i = 0; _i < attackDice; i = _i += 1) {
    attackRoll = roll(6);
    if ((1 <= attackRoll && attackRoll <= crits)) {
      critCount += 1;
    } else if (attackRoll <= (crits + hits)) {
      hitCount += 1;
    }
  }
  totalHits = hitCount;
  totalCrits = critCount;
  for (i = _j = 0; _j < defenseDice; i = _j += 1) {
    defenseRoll = roll(6);
    if (defenseRoll <= shields) {
      shieldCount += 1;
      if (cancelCrits) {
        if (critCount > 0) {
          critCount -= 1;
        } else if (hitCount > 0) {
          hitCount -= 1;
        }
      } else {
        if (hitCount > 0) {
          hitCount -= 1;
        } else if (critCount > 0) {
          critCount -= 1;
        }
      }
    }
  }
  if (critCount > 0) {
    result = firepower + critCount + hitCount;
    if (result > armor) {
      penetrate = true;
    }
  }
  return {
    hit: hitCount > 0 || critCount > 0,
    penetrate: penetrate,
    hitCount: totalHits,
    critCount: totalCrits,
    shieldCount: shieldCount
  };
};

calculate = function() {
  var armor, attackDice, cancelCritsFirst, critCount, critSides, defenseDice, finalHitCount, firepower, hit, hitCount, hitSides, i, iterations, penetrate, penetrateCount, range, shieldCount, shields, totalCrits, totalHits, totalShields, _i, _j, _ref;
  iterations = getIntValue("iterations");
  attackDice = getIntValue("attackDice");
  defenseDice = getIntValue("defenseDice");
  firepower = getIntValue("firepower");
  hitSides = getIntValue("hitSides");
  critSides = getIntValue("critSides");
  shields = getIntValue("shieldSides");
  range = getIntSelectValue("range");
  switch (range) {
    case 1:
      attackDice += 1;
      break;
    case 3:
      defenseDice += 1;
      break;
    case 4:
      defenseDice += 2;
  }
  $("#details").text("" + attackDice + " attack dice vs " + defenseDice + " defense dice");
  cancelCritsFirst = getBooleanValue("cancelCrits");
  for (armor = _i = 1; _i < 20; armor = ++_i) {
    finalHitCount = 0;
    penetrateCount = 0;
    totalHits = 0;
    totalCrits = 0;
    totalShields = 0;
    for (i = _j = 1; _j <= iterations; i = _j += 1) {
      _ref = calculateOne(attackDice, critSides, hitSides, defenseDice, shields, firepower, armor, cancelCritsFirst), hitCount = _ref.hitCount, critCount = _ref.critCount, shieldCount = _ref.shieldCount, hit = _ref.hit, penetrate = _ref.penetrate;
      totalHits += hitCount;
      totalCrits += critCount;
      totalShields += shieldCount;
      if (hit) {
        finalHitCount += 1;
      }
      if (penetrate) {
        penetrateCount += 1;
      }
    }
    lineChartData.datasets[0].data[armor - 1] = finalHitCount / iterations * 100;
    lineChartData.datasets[1].data[armor - 1] = penetrateCount / iterations * 100;
  }
};

$(function() {
  showChart();
  return $('#penetrationForm').submit(function() {
    calculate();
    showChart();
    return false;
  });
});
